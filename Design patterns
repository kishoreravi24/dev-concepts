Design patterns:
	Provide a resuable solution for common problems

	1) Creational pattern
		* Singleton pattern - class must have one instance
		* Factory method pattern - create instance for several derived class
		* Abstract Factory method pattern - create instance for several family class
		* Builder - seperate object creation from its representation
	2) Structural pattern
		* Adapter pattern - provide interface for different classes
		* Composite pattern - simple and composite object
		* Facede pattern - single class responsible for enitre subsystem
		* Decorate pattern - add responsible to the object dynamically 
	3) Behavioral pattern
		* Observer pattern - when one object change it state all it dependency needs to be update automatically
		* Command pattern - command request as an object
		* State pattern - alter object behaviour when the state changes
		* Strategy pattern - implements algorithm in the class